///usr/bin/env jbang "$0" "$@" ; exit $?
// Update the Quarkus version to what you want here or run jbang with
// `-Dquarkus.version=<version>` to override it.
//DEPS io.quarkus:quarkus-bom:${quarkus.version:2.4.0.Final}@pom
//DEPS io.quarkus:quarkus-picocli
//DEPS io.quarkus:quarkus-rest-client-reactive-jackson

//Q:CONFIG quarkus.banner.enabled=false
//Q:CONFIG quarkus.log.level=WARN

//Q:CONFIG quarkus.rest-client.DayCaptain.url=https://daycaptain.com/
//JAVAC_OPTIONS -parameters

import static java.lang.String.format;
import static java.lang.System.out;
import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.ElementType.TYPE;

import java.io.IOException;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.temporal.WeekFields;
import java.util.Date;

import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.NameBinding;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.container.ContainerRequestContext;
import javax.ws.rs.container.ContainerRequestFilter;
import javax.ws.rs.ext.Provider;

import org.eclipse.microprofile.rest.client.annotation.RegisterProvider;
import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;
import org.eclipse.microprofile.rest.client.inject.RestClient;

import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.ITypeConverter;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;

@CommandLine.Command(name = "todos-add", mixinStandardHelpOptions = true)
public class TodosAdd {

    @RestClient
    DayCaptain captain;

    @Option(names="--token", defaultValue = "${DC_API_TOKEN}", required = true)
    String token;

    String token() {
        return "Bearer " + token;
    }

    @Command(description = "Add the task to today's tasks")
    int today(String task) {
        return date(LocalDate.now(), task);
    }

    @Command(description = "Add the task to tomorrow's tasks")
    int tomorrow(String task) {
        return date(LocalDate.now().plusDays(1), task);
    }

    @Command(description = "Add the task to the DATE (formatted by ISO-8601, e.g. 2021-01-31")
    int date(@Parameters LocalDate date, String task) {
        out.println(format("Adding '%s' to DayCaptain tasks in %s: ", task, date));
        captain.addDayTask(token(), date.toString(), new Task(task));
        out.println("OK");
        return 0;
    }

    @Command(description = "Add the task to this week")
    int w(String task) {
        return week(LocalDate.now(), task);
    }

    @Command(description = "Add the task to the WEEK")
    int week(@Parameters(converter = ISO8691Week.class) LocalDate week, String task) {
        String humanWeek = week.format(ISO8691Week.weekFormat);
        out.println(format("Adding '%s' to DayCaptain tasks in week %s: ", task, humanWeek));
        captain.addDayTask(token(), humanWeek, new Task(task));
        out.println("OK");
        return 0;
    }

    @Command(description = "Add the task to the backlog inbox")
    int inbox(@Parameters() String task) {
        out.println(format("Adding '%s' to DayCaptain inbox: ", task));
        captain.addInboxItem(token(), new Task(task));
        out.println("OK");
        return 0;
    };

    
}

class Task {
    public String string;

    public Task(String string) {
        this.string=string;
    }
}

@RegisterRestClient
//@RegisterProvider(LoggingFilter.class)
interface DayCaptain {

    @POST
    @Path("/backlog-items")
    void addInboxItem(@HeaderParam("Authorization") String auth, Task task);

    @POST
    @Path("/{date}/tasks")
    void addDayTask(@HeaderParam("Authorization") String auth, @PathParam("date") String date, Task task);

    @POST
    @Path("/{week}/tasks")
    void addWeekTask(@HeaderParam("Authorization") String auth, @PathParam("week") String week, Task task);

}

class ISO8691Week implements ITypeConverter<LocalDate> {
    static DateTimeFormatter weekFormat = new DateTimeFormatterBuilder().appendPattern("YYYY-'W'w")
    .parseDefaulting(WeekFields.ISO.dayOfWeek(), 1)
    .toFormatter();

    @Override
    public LocalDate convert(String value) throws Exception {
        LocalDate result = LocalDate.parse(value, 
        weekFormat);

        return result;
    }
}
